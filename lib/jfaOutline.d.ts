import { Vector2, WebGLRenderer, WebGLRenderTarget, Scene, Camera } from "three";
import { FullScreenPass } from "./fullScreenPass";
export declare class JFAOutline {
    private uvPass;
    private jumpFloodPass;
    private outlinePass;
    private selectedMaterial;
    /**
     * Construct an instance of JFAOutline
     * @param targets The targets to ping pong between.
     * @param iResolution Three.Vector2 containing width and height of the screen.
     * @param outlinePass Optional custom outlining shader.
     */
    constructor(targets: WebGLRenderTarget[], iResolution: Vector2, outlinePass?: FullScreenPass);
    /**
     * One call interface for rendering object outlines.
     * @param renderer Three.JS renderer
     * @param scene Three.JS scene
     * @param camera Three.JS target.
     * @param targets Render targets array (at least length two) to ping pong between, must be of type float.
     * @param iResolution Three.JS Vector2 containing width/height.
     * @param selectedLayer The layer for selected objects.
     * @param outlineUniforms Optional uniforms to pass in for the outlining shader.
     */
    outline(renderer: WebGLRenderer, scene: Scene, camera: Camera, targets: WebGLRenderTarget[], iResolution: Vector2, selectedLayer: number, outlineUniforms?: any): void;
    /**
     * Allows one to update the outlining shader used.
     * @param outlinePass New outline shader
     * @returns Old outline shader
     */
    setOutlinePass(outlinePass: FullScreenPass): FullScreenPass;
    /**
     * Render the selected objects to the first render target.
     * @param renderer Three.JS renderer
     * @param scene Three.JS scene
     * @param camera Three.JS target.
     * @param targets Render targets array (at least length two) to ping pong between, must be of type float.
     * @param selectedLayer The layer for selected objects.
     */
    renderSelected(renderer: WebGLRenderer, scene: Scene, camera: Camera, targets: WebGLRenderTarget[], selectedLayer: number): void;
    /**
     * This renders the distance texture from the initial outline buffer generated by renderSelected.
     * outlineUniforms.threshHigh is used to determine how much of the distance buffer to generate, if
     * it is not passed, it will generate the distance texture for the whole screen.
     *
     * @param renderer Three.JS renderer
     * @param targets Render targets array (at least length two) to ping pong between, must be of type float.
     * @param iResolution Three.JS Vector2 containing width/height.
     * @param outlineUniforms Optional uniforms to pass in for the outlining shader.
     * @returns Index of the final render target that contains the distance texture
     */
    renderDistanceTex(renderer: WebGLRenderer, targets: WebGLRenderTarget[], iResolution: Vector2, outlineUniforms?: any): number;
    /**
     *
     * @param renderer Three.JS renderer
     * @param distanceIndex Index into targets of the final distance texture
     * @param targets Render targets used to generate distance texture
     * @param outlineUniforms Custom uniforms for outline shader
     */
    renderOutline(renderer: WebGLRenderer, distanceIndex: number, targets: WebGLRenderTarget[], outlineUniforms?: any): void;
}
